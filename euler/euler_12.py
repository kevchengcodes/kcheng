"""
********* Euler Problem 12 *********
PROMPT:
The sequence of triangle numbers is generated by adding the natural numbers.
What is the value of the first triangle number to 
have over five hundred divisors?

"""

import math

# Find prime factorization to find number of divisors
# Triangle number = x * (x+1)/2
# Even numbers: find prime factorization of x/2 and x+1
# Odd numbers: find prime factorization of x and (x+1)/2
# Number of factors is 

# Create a list of prime numbers
n = 1000000
primes = [True for i in range(n+1)]
p = 2 # start at the first prime number, 2
plist = []

# Iterate up to n
while p <= n:
    # if the bool for that number is True, it is a prime
    if primes[p] == True:
        # eliminate all multiples of the prime up to n
        for i in range(p*p,n,p):
            primes[i] = False
        plist.append(p)
    p+=1

# Initialize
count = 1
x = 1

# Run triangle number prime factorizations until n has 500 factors
while count <= 500:
    n = int(x*(x+1)/2) # triangle number

    count = 1 # re-initialize for each triangle number
    
    # choose which 2 numbers to prime factorize based on even/odd
    if x % 2 == 0:
        xlist = [x/2,x+1]
    else:
        xlist = [x,(x+1)/2]
    
    # for each of those 2 selected numbers:
    for t in xlist:
        # for each prime number in plist until prime factorization found:
        for p in plist:
            pct = 0
            if t % p == 0:
                # if p is a factor, divide by p until you can't 
                while t % p == 0:
                    t = t/p
                    pct += 1 # count for the exponent of p
                pct += 1 # add 1 to the exponent
                # the count of factors is the product of all exponents + 1
                count *= pct 
            if t == 1:
                break # prime factorization found! stop the loop

    x += 1

print(n)